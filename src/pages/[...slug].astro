---
import Block from '@/components/Block.astro';
import BlockCTA from '@/components/BlockCTA.astro';
import BlockHero from '@/components/BlockHero.astro';
import BlockLogoSlider from '@/components/BlockLogoSlider.astro';
import BlockText from '@/components/BlockText.astro';
import Container from '@/components/Container.astro';
import Heading from '@/components/Heading.astro';
import Section from '@/components/Section.astro';
import Layout from '@/layouts/Layout.astro';
import {
  fetchMainMenu,
  fetchMetaInformation,
  fetchPages,
  fetchSettings
} from '@/lib/directus';
import type { Page } from '@/lib/types';
import { Debug } from 'astro:components';

let page: Page | Record<string, any>;

// Only for production purposes.
export async function getStaticPaths() {
  const pages = await fetchPages();
  return pages?.map((page) => ({
    params: {
      slug: page.slug
    },
    props: {
      ...page
    }
  }));
}

// Only for preview/development purposes.
if (import.meta.env.NODE_ENV === 'production') {
  page = Astro.props;
} else {
  const pages = await fetchPages();
  const { slug } = Astro.params;

  page = pages.find(
    (p) => p.slug === `/${slug}` || (slug === undefined && p.slug === undefined)
  ) as Page;
  if (!page) {
    Astro.redirect('/404');
  }
}

// Fetch Main Menu
const mainMenu = await fetchMainMenu();
const metaInformation = await fetchMetaInformation(page?.id);
const settings = await fetchSettings();
---

<Layout
  title={page?.title}
  mainMenu={mainMenu}
  metaInformation={metaInformation}
  settings={settings}
>
  {
    page?.showTitle && (
      <Section>
        <Container>
          <Heading>{page?.title}</Heading>
        </Container>
      </Section>
    )
  }
  {
    page?.sections?.map((section) => (
      <Section {...section.sections_id}>
        <Container>
          {section.sections_id.blocks.map((block) => (
            <>
              {block.collection === 'block_hero' && (
                <Block block={block}>
                  <BlockHero {...block.item} />
                </Block>
              )}
              {block.collection === 'block_text' && (
                <Block block={block}>
                  <BlockText {...block.item} />
                </Block>
              )}
              {block.collection === 'block_cta' && (
                <Block block={block}>
                  <BlockCTA {...block.item} />
                </Block>
              )}
              {block.collection === 'block_logo_slider' && (
                <Block block={block}>
                  <BlockLogoSlider {...block.item} />
                </Block>
              )}
            </>
          ))}
        </Container>
      </Section>
    ))
  }
</Layout>
