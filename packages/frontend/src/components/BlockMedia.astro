---
import BlockVideoComponent from '@/components/react/BlockMedia';
import { getMaxWidthClass } from '@/lib/util';
import { Image } from 'astro:assets';

type Props = {
  type: 'youtube_video' | 'image' | 'video';
  ytId?: string | null;
  maxWidth?: string | null;
  videoUrl?: string | null;
  captionUrl?: string | null;
  imageUrl?: string | null;
  imageAlt?: string | null;
};

let {
  type,
  ytId,
  videoUrl,
  captionUrl,
  imageUrl,
  imageAlt = '',
  maxWidth = 'max-w-4xl'
} = Astro.props;
---

<div
  class:list={[
    'media-component group relative mx-auto',
    getMaxWidthClass(maxWidth)
  ]}
>
  {
    type === 'youtube_video' && ytId && (
      <BlockVideoComponent youtubeId={ytId} client:load>
        <div class='video-thumbnail-wrapper relative bottom-0 left-0 right-0 top-0 z-10 cursor-pointer'>
          <Image
            class='h-full w-full object-cover'
            src={`https://img.youtube.com/vi/${ytId}/maxresdefault.jpg`}
            width={1280}
            height={720}
            alt='YouTube Video'
            quality={75}
            widths={[240, 480, 720, 1280]}
          />
          <div class='absolute left-1/2 top-1/2 z-10 -translate-x-1/2 -translate-y-1/2 transform'>
            <div class='play-icon text-8xl text-white'>
              <i class='fa-solid fa-play duration-110 drop-shadow-md transition ease-in-out group-hover:scale-110' />
            </div>
          </div>
        </div>
      </BlockVideoComponent>
    )
  }

  {
    type === 'video' && (
      <>
        {imageUrl && (
          <div class='video-thumbnail-wrapper absolute bottom-0 left-0 right-0 top-0 z-10 cursor-pointer'>
            <Image
              src={imageUrl}
              width={1280}
              height={720}
              alt='YouTube Video'
              quality={75}
              widths={[240, 480, 720, 1280]}
            />
            <div class='absolute left-1/2 top-1/2 z-10 -translate-x-1/2 -translate-y-1/2 transform'>
              <div class='play-icon text-8xl text-white'>
                <i class='fa-solid fa-play duration-110 drop-shadow-md transition ease-in-out group-hover:scale-110' />
              </div>
            </div>
          </div>
        )}

        {!videoUrl && imageUrl && (
          <img class='w-full' src={imageUrl} alt={imageAlt} />
        )}

        {videoUrl && (
          // eslint-disable-next-line jsx-a11y/media-has-caption
          <video class='video-player w-full' controls src={videoUrl}>
            {captionUrl && (
              <track
                kind='captions'
                src={captionUrl}
                srclang='de'
                label='German'
              />
            )}
          </video>
        )}
      </>
    )
  }

  {
    type === 'image' && (
      <>
        {imageUrl && (
          <div class='video-thumbnail-wrapper absolute bottom-0 left-0 right-0 top-0 z-10 cursor-pointer'>
            <Image
              src={imageUrl}
              width={1280}
              height={720}
              alt='YouTube Video'
              quality={75}
              widths={[240, 480, 720, 1280]}
            />
          </div>
        )}

        {!videoUrl && imageUrl && (
          <img class='w-full' src={imageUrl} alt={imageAlt} />
        )}

        {videoUrl && (
          // eslint-disable-next-line jsx-a11y/media-has-caption
          <video class='video-player w-full' controls src={videoUrl}>
            {captionUrl && (
              <track
                kind='captions'
                src={captionUrl}
                srclang='de'
                label='German'
              />
            )}
          </video>
        )}
      </>
    )
  }
</div>

<script>
  // @ts-nocheck
  (function () {
    const videoComponents = document.querySelectorAll('.media-component');

    for (const component of videoComponents) {
      const thumbnailWrapper = component.querySelector(
        '.video-thumbnail-wrapper'
      );
      const videoPlayer = component.querySelector('.video-player');

      if (thumbnailWrapper && videoPlayer) {
        const playIcon = thumbnailWrapper.querySelector('.play-icon');

        const thumbnailWrapperWidth = thumbnailWrapper.offsetWidth;
        // Set the font size of the play icon
        // based on the width of the thumbnail wrapper
        playIcon.style.fontSize = `${thumbnailWrapperWidth / 8}px`;

        thumbnailWrapper.addEventListener('click', function () {
          thumbnailWrapper.style.display = 'none';
          videoPlayer.style.display = 'block';
          videoPlayer.play();
        });
      }
    }
  })();
</script>
