---
import type { fetchBlockHero } from '@/loaders/BlockHeroLoader.astro';
import { getImage } from 'astro:assets';
import { marked } from 'marked';
import { twMerge } from 'tailwind-merge';
import BlockCTA from './BlockCTA.astro';

type Props = Awaited<ReturnType<typeof fetchBlockHero>>;

const {
  image,
  imageMobile,
  imageStyles = [],
  title,
  subtitle,
  ctas
} = Astro.props;

let maxWidthDesktop = 1250;
let maxHeightDesktop;
if (image.width > maxWidthDesktop) {
  maxHeightDesktop = (image.height / image.width) * maxWidthDesktop;
} else {
  maxWidthDesktop = image.width;
  maxHeightDesktop = image.height;
}

let optimizedBackground = await getImage({
  src: image.src,
  format: 'webp',
  width: maxWidthDesktop * 2,
  height: maxHeightDesktop * 2,
  quality: 90,
  transforms: {
    resize: {
      type: 'contain',
      width: maxWidthDesktop,
      height: maxHeightDesktop
    }
  }
});

let maxWidthMobile = 620;
let maxHeightMobile;
if (imageMobile) {
  if (imageMobile.width > maxWidthMobile) {
    maxHeightMobile = (imageMobile.height / imageMobile.width) * maxWidthMobile;
  } else {
    maxWidthMobile = imageMobile.width;
    maxHeightMobile = imageMobile.height;
  }
}

let optimizedMobileBackground;
if (imageMobile) {
  optimizedMobileBackground = await getImage({
    src: imageMobile.src,
    format: 'webp',
    width: maxWidthMobile,
    height: maxHeightMobile,
    quality: 70
  });
}

const stylesMapping = {
  rounded_tl: 'rounded-tl-[70px]',
  rounded_tr: 'rounded-tr-[70px]',
  rounded_bl: 'rounded-bl-[70px]',
  rounded_br: 'rounded-br-[70px]'
};

const imageStyleClasses = imageStyles
  ?.map((corner) => {
    if (corner in stylesMapping) {
      return `${stylesMapping[corner]}`;
    }
    return corner;
  })
  .join(' ');
---

<div
  style={{
    '--optimized-mobile-background-url': `url(${optimizedMobileBackground?.src})`,
    '--optimized-background-url': `url(${optimizedBackground.src})`
  }}
  class:list={[
    twMerge(
      '-mx-8 flex h-[488px] items-center bg-re-gray bg-cover bg-center bg-no-repeat text-left xl:mx-0',
      imageStyleClasses,
      optimizedMobileBackground
        ? 'bg-[image:var(--optimized-mobile-background-url)] lg:bg-[image:var(--optimized-background-url)]'
        : 'bg-[image:var(--optimized-background-url)]'
    )
  ]}
>
  <div class='mx-8 mb-2 w-[620px] text-white lg:mx-24'>
    <h2
      class='mb-4 hyphens-auto font-serif text-4xl font-semibold leading-tight lg:hyphens-none lg:text-5xl'
    >
      {title}
    </h2>
    <div class='mb-16 text-lg font-medium' set:html={marked(subtitle ?? '')} />
    {ctas && <BlockCTA alignment='left' ctas={ctas} />}
  </div>
</div>
