---
import {
  getAlignmentClass,
  getMaxWidthClass,
  getTextColorClass
} from '@/lib/util';
import { Image } from 'astro:assets';
import { marked } from 'marked';
import BlockText from './BlockText.astro';

type Column = {
  alignment?: 'left' | 'center' | 'right';
  color?: 'blue' | 'turquoise' | 'white';
  columnWidthPercent: 33 | 47 | 50;
  imageUrl?: string | undefined | null;
  imageAlt?: string | undefined | null;
  imageWidth?: string | undefined | null;
  imageHeight?: string | undefined | null;
  imageObjectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  imageOptimize?: boolean;
  text?: string | undefined | null;
};

type Props = {
  columns: Column[];
  max_width_container?: string;
};

const { columns = [], max_width_container } = Astro.props;
---

<div
  class:list={[
    'prose mx-auto my-8 flex max-w-none flex-wrap justify-center',
    getMaxWidthClass(max_width_container)
  ]}
>
  {
    columns.map((column) => (
      <div
        class:list={['px-12', 'pb-12', getAlignmentClass(column.alignment)]}
        style={`width: ${column.columnWidthPercent}%;`}
      >
        <article
          class:list={[
            'prose my-8 max-w-none prose-p:font-light prose-a:text-inherit prose-strong:text-inherit',
            getTextColorClass(column.color)
          ]}
        >
          {column.imageUrl && (
            <>
              {column.imageOptimize ? (
                <Image
                  src={column.imageUrl}
                  alt={column.imageAlt || ''}
                  class='mb-0 inline-block'
                  style={`width: ${column.imageWidth || '100%'}; height: ${
                    column.imageHeight || '100%'
                  }; bject-fit: ${column.imageObjectFit || 'contain'};`}
                  width={200}
                  height={200}
                />
              ) : (
                <img
                  src={column.imageUrl}
                  alt={column.imageAlt || ''}
                  class='mb-0 inline-block'
                  style={`width: ${column.imageWidth || '100%'}; height: ${
                    column.imageHeight || '100%'
                  }; bject-fit: ${column.imageObjectFit || 'contain'};`}
                />
              )}
            </>
          )}
          <BlockText text={marked(column.text ?? '')} />
        </article>
      </div>
    ))
  }
</div>
