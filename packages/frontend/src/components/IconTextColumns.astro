---
import { marked } from 'marked';

const alignmentDefault = 'center';

const { columns = [], max_width_container } = Astro.props;

const alignments = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right'
};

const textColors = {
  blue: 'text-re-blue',
  turquoise: 'text-re-turquoise',
  white: 'text-white'
};

const NO_MAX_WIDTH = 'max-w-none';
const maxWidths = new Set([
  NO_MAX_WIDTH,
  'max-w-xs',
  'max-w-sm',
  'max-w-md',
  'max-w-lg',
  'max-w-xl',
  'max-w-2xl',
  'max-w-3xl',
  'max-w-4xl'
]);
const getMaxWidthClass = (width, defaultValue = NO_MAX_WIDTH) =>
  maxWidths.has(width) ? width : defaultValue;
---

<div
  class:list={[
    'prose mx-auto my-8 flex max-w-none flex-wrap justify-center',
    getMaxWidthClass(max_width_container)
  ]}
>
  {
    columns.map((column) => (
      <div
        class:list={[
          'px-12',
          'pb-12',
          alignments[column.alignment] || alignments[alignmentDefault]
        ]}
        style={`width: ${column.columnWidthPercent}%;`}
      >
        <article
          class:list={[
            'prose my-8 max-w-none prose-a:text-inherit prose-strong:text-inherit',
            `${textColors[column.color] || 'text-re-blue'}`
          ]}
        >
          {column.imageUrl && (
            <img
              src={column.imageUrl}
              alt={column.imageAlt || ''}
              class='mb-0 inline-block'
              style={`width: ${column.imageWidth || '100%'}; 
                        height: ${column.imageHeight || '100%'};
                        object-fit: ${column.imageObjectFit || 'contain'};`}
            />
          )}
          <div set:html={marked(column.text)} class='leading-relaxed' />
        </article>
      </div>
    ))
  }
</div>
