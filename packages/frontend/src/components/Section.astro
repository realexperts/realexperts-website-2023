---
import {
  getMarginBottomClass,
  getMarginTopClass,
  getPaddingBottomClass,
  getPaddingTopClass
} from '@/lib/util';
import { twMerge } from 'tailwind-merge';
import SectionEdit from './react/SectionEdit';

type Props = {
  id?: number;
  marginTop?: Parameters<typeof getMarginTopClass>[0];
  marginBottom?: Parameters<typeof getMarginBottomClass>[0];
  paddingTop?: Parameters<typeof getPaddingTopClass>[0];
  paddingBottom?: Parameters<typeof getPaddingBottomClass>[0];
  section_styles?: string[] | null;
  color?: string | null;
  slug?: string | null;
};

const {
  id,
  marginTop = 'mt-16',
  marginBottom = 'mb-16',
  paddingTop = 'pt-16',
  paddingBottom = 'pb-16',
  section_styles,
  color = 'white',
  slug
} = Astro.props;

// Define a type for the keys of colorMapping
type ColorKey =
  | '#0F3F93'
  | '#EAF4F5'
  | '#2DB7BC'
  | 'gray'
  | 'transparent'
  | 'turquoise-dark'
  | 'white';

const colorMapping: Record<ColorKey, string> = {
  '#0F3F93': 'bg-re-blue text-white',
  '#2DB7BC': 'bg-re-turquoise text-white',
  gray: 'bg-re-gray text-black',
  transparent: 'bg-transparent text-black',
  '#EAF4F5': 'bg-re-turquoise-light text-re-blue',
  'turquoise-dark': 'bg-re-turquoise text-white',
  white: 'bg-white text-re-blue'
};

// Define a type for the keys of stylesMapping
type StyleKey =
  | 'full_width'
  | 'rounded_tl'
  | 'rounded_tr'
  | 'rounded_bl'
  | 'rounded_br';

const stylesMapping: Record<StyleKey, string> = {
  full_width: 'w-full',
  rounded_tl: 'rounded-tl-3xl',
  rounded_tr: 'rounded-tr-3xl',
  rounded_bl: 'rounded-bl-3xl',
  rounded_br: 'rounded-br-3xl'
};

const sectionStyles = section_styles
  ?.map((style) => {
    if (style in stylesMapping) {
      return stylesMapping[style as StyleKey];
    }
    return style;
  })
  .join(' ');

const sectionWidth =
  !section_styles?.includes('full_width') && 'w-full max-w-website mx-auto';

const classes = twMerge(
  colorMapping[color as ColorKey],
  sectionWidth,
  sectionStyles,
  getMarginTopClass(marginTop),
  getMarginBottomClass(marginBottom),
  getPaddingTopClass(paddingTop),
  getPaddingBottomClass(paddingBottom)
);
---

<>
  {
    import.meta.env.BUILD_MODE === 'production' ? (
      <section class={classes} id={slug}>
        <slot />
      </section>
    ) : (
      <SectionEdit
        id={id}
        marginTop={marginTop}
        marginBottom={marginBottom}
        paddingTop={paddingTop}
        paddingBottom={paddingBottom}
        client:load
      >
        <section class={classes} id={slug}>
          <slot />
        </section>
      </SectionEdit>
    )
  }
</>
