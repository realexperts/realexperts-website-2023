---
import type { loadBlockText } from '@/loaders/BlockTextLoader.astro';
import { marked } from 'marked';
import { twMerge } from 'tailwind-merge';

type Props = Awaited<ReturnType<typeof loadBlockText>>;

const {
  alignment,
  color_headline,
  color_text,
  max_width_container = 'max-w-4xl',
  text
} = Astro.props;

// Define constants for reused class names
const NO_MAX_WIDTH = 'max-w-none';

const alignments = {
  left: 'text-left',
  center: 'text-center mx-auto',
  right: 'text-right'
};

// Add NO_MAX_WIDTH to Set
const maxWidths = new Set([
  NO_MAX_WIDTH,
  'max-w-xs',
  'max-w-sm',
  'max-w-md',
  'max-w-lg',
  'max-w-xl',
  'max-w-2xl',
  'max-w-3xl',
  'max-w-4xl'
]);

// Find class name by key or return default
const getAlignmentClass = (key: typeof alignments, defaultValue = '') =>
  key.hasOwnProperty(alignment) ? key[alignment] : defaultValue;

// Find max width class name or return default
const getMaxWidthClass = (width: string, defaultValue = NO_MAX_WIDTH) =>
  maxWidths.has(width) ? width : defaultValue;

// Configure custom renderer
const renderer = new marked.Renderer();

// Color
const getColor = (color: string | null) => {
  switch (color) {
    case 'turquoise': {
      return 'text-re-turquoise';
    }
    case 'white': {
      return 'text-white';
    }
    default: {
      return 'text-re-blue';
    }
  }
};

const textClassNames = twMerge('font-sans text-[24px]', getColor(color_text));

// Override function for rendering 'h1' elements
renderer.heading = (content, level) => {
  const headingClassNames = twMerge(
    'font-serif font-semibold',
    getColor(color_headline)
  );

  switch (level) {
    case 1: {
      return `<h1 class="${twMerge(
        'text-5xl mb-8',
        headingClassNames
      )}">${content}</h1>`;
    }
    case 2: {
      return `<h2 class="${twMerge(
        'text-4xl mb-8',
        headingClassNames
      )}">${content}</h2>`;
    }
    case 3: {
      return `<h3 class="${twMerge(
        'text-3xl mb-8',
        headingClassNames
      )}">${content}</h3>`;
    }
    case 4: {
      return `<h4 class="${twMerge(
        'text-2xl mb-8',
        headingClassNames
      )}">${content}</h4>`;
    }
    case 5: {
      return `<h5 class="${twMerge(
        'text-xl mb-8',
        headingClassNames
      )}">${content}</h5>`;
    }
    case 6: {
      return `<h6 class="${twMerge(
        'text-lg mb-8',
        headingClassNames
      )}">${content}</h6>`;
    }
    default: {
      return `<h${level} class="${twMerge(
        'text-5xl mb-8',
        headingClassNames
      )}">${content}</h${level}>`;
    }
  }
};

// Use the custom renderer in the marked options
marked.setOptions({ renderer });

const renderedMarkdown = marked(text ?? '');
---

<div
  class:list={[
    'mx-auto',
    max_width_container && getMaxWidthClass(max_width_container)
  ]}
>
  <div
    class:list={[
      'prose my-8 max-w-none prose-a:text-inherit prose-strong:text-inherit',
      textClassNames,
      getAlignmentClass(alignments, alignment)
    ]}
    set:html={renderedMarkdown}
  />
</div>
