---
import Block from '@/components/Block.astro';
import Container from '@/components/Container.astro';
import Heading from '@/components/Heading.astro';
import EditorMode from '@/components/react/EditorMode';
import Section from '@/components/Section.astro';
import Layout from '@/layouts/Layout.astro';
import { fetchPages } from '@/lib/directus';
import type { ArrayElement } from '@/lib/typescript';
import BlockCtaLoader from '@/loaders/BlockCtaLoader.astro';
import BlockFormLoader from '@/loaders/BlockFormLoader.astro';
import BlockHeroLoader from '@/loaders/BlockHeroLoader.astro';
import BlockIconTextColumnsLoader from '@/loaders/BlockIconTextColumnsLoader.astro';
import BlockLogoSliderLoader from '@/loaders/BlockLogoSliderLoader.astro';
import BlockMediaLoader from '@/loaders/BlockMediaLoader.astro';
import BlockQnaLoader from '@/loaders/BlockQnaLoader.astro';
import BlockSideBySideLoader from '@/loaders/BlockSideBySideLoader.astro';
import BlockTestimonialLoader from '@/loaders/BlockTestimonialLoader.astro';
import BlockTextLoader from '@/loaders/BlockTextLoader.astro';

let page: ArrayElement<Awaited<ReturnType<typeof fetchPages>>>;

// Only for production purposes.
export async function getStaticPaths() {
  const pages = await fetchPages();

  return pages?.map((page) => ({
    params: {
      slug: page?.url === '/' ? undefined : page?.url?.replace('/', '')
    },
    props: {
      page
    }
  }));
}

// Only for preview/development purposes.
if (
  import.meta.env.BUILD_MODE === 'production' ||
  import.meta.env.BUILD_MODE === 'development'
) {
  const properties = Astro.props;
  page = properties.page;
} else {
  const { slug } = Astro.params;
  const pages = await fetchPages();

  page = pages.find(
    (p) => p?.url === `/${slug}` || (slug === undefined && p?.url === '/')
  );
}
---

<Layout page={page}>
  {import.meta.env.BUILD_MODE !== 'production' && <EditorMode client:load />}
  {
    page?.show_title && (
      <Section
        marginTop={'mt-0'}
        marginBottom={'mb-0'}
        paddingTop={'pt-0'}
        paddingBottom={'pb-0'}
      >
        <Container>
          <Heading>{page?.title}</Heading>
        </Container>
      </Section>
    )
  }
  {
    page?.sections?.map((section) => (
      <Section
        {...{
          id: section.sections_id?.id,
          marginTop: section.sections_id?.margin_top,
          marginBottom: section.sections_id?.margin_bottom,
          paddingTop: section.sections_id?.padding_top,
          paddingBottom: section.sections_id?.padding_bottom,
          color: section.sections_id?.color,
          section_styles: section.sections_id?.section_styles,
          slug: section.sections_id?.slug
        }}
      >
        <Container>
          {section.sections_id?.blocks?.map(
            (block) =>
              typeof block.item === 'string' && (
                <>
                  {block.collection === 'block_hero' && (
                    <Block
                      id={block.id}
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockHeroLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_cta' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockCtaLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_logo_slider' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockLogoSliderLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_qna_list' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockQnaLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_icon_text_columns' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockIconTextColumnsLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_text' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockTextLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_media' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockMediaLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_side_by_side' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockSideBySideLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_testimonials' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockTestimonialLoader itemId={block.item} />
                    </Block>
                  )}
                  {block.collection === 'block_form' && (
                    <Block
                      marginTop={block.margin_top}
                      marginBottom={block.margin_bottom}
                    >
                      <BlockFormLoader itemId={block.item} />
                    </Block>
                  )}
                </>
              )
          )}
        </Container>
      </Section>
    ))
  }
</Layout>
